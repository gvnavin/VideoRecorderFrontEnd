Let's start by creating the project structure and installing the necessary dependencies. We will use the `create-react-app` command to create a new React project, and then install `react-webcam` for accessing the webcam, and `@ffmpeg/ffmpeg` for recording and processing the video.

package.json
```json
{
  "name": "video-recorder",
  "version": "1.0.0",
  "description": "A React app to record video from webcam",
  "main": "index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "react-webcam": "^5.1.1",
    "@ffmpeg/ffmpeg": "^0.9.4"
  }
}
```

Next, we will create the main `App.js` file. This file will contain the main `App` component, which will handle the webcam access, video recording, and saving the video to the backend API.

App.js
```jsx
import React, { useRef, useState } from 'react';
import Webcam from 'react-webcam';
import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';

const ffmpeg = createFFmpeg({ log: true });

function App() {
  const webcamRef = useRef(null);
  const [capturing, setCapturing] = useState(false);
  const [recordedChunks, setRecordedChunks] = useState([]);
  const [completedBlob, setCompletedBlob] = useState(null);

  const handleStartCaptureClick = React.useCallback(() => {
    setCapturing(true);
    webcamRef.current.stream.getVideoTracks()[0].start();
  }, [webcamRef, setCapturing]);

  const handleStopCaptureClick = React.useCallback(async () => {
    setCapturing(false);
    const recordedBlob = new Blob(recordedChunks, { type: 'video/webm' });
    const buffer = Buffer.from(await recordedBlob.arrayBuffer());
    const video = await ffmpeg.run('-i', 'input.webm', 'output.mp4');
    const blob = new Blob([buffer], { type: 'video/mp4' });
    setCompletedBlob(blob);
  }, [webcamRef, setCapturing, recordedChunks]);

  const handleDataAvailable = React.useCallback(({ data }) => {
    if (data.size > 0) {
      setRecordedChunks((prev) => prev.concat(data));
    }
  }, [setRecordedChunks]);

  return (
    <div className="App">
      <header className="App-header">
        <Webcam audio={false} ref={webcamRef} />
        {capturing ? (
          <button onClick={handleStopCaptureClick}>Stop Capture</button>
        ) : (
          <button onClick={handleStartCaptureClick}>Start Capture</button>
        )}
        {completedBlob && <video src={URL.createObjectURL(completedBlob)} />}
      </header>
    </div>
  );
}

export default App;
```

Next, we will create the `App.css` file to style our application.

App.css
```css
.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

button {
  margin-top: 20px;
  padding: 10px 20px;
  font-size: 16px;
}
```

Finally, we will create the `index.js` file, which is the entry point of our application.

index.js
```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import './App.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

To start the development server, you can run `npm start` in the project directory. The app will be available at `http://localhost:3000`.

Please note that this is a basic implementation and does not include the functionality to save the video to a backend API. You would need to implement this functionality based on the specific requirements of your backend API.